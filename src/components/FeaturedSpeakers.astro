---
// Packages
import { Picture } from "astro:assets"
import type { ImageMetadata } from "astro"

// Components
import Button from "components/Button.astro"

// JSON
import speakersData from "json/Speakers.json"

// Define speaker type
interface Speaker {
  id: string;
  name: string;
  bio: string;
  role: string;
  org: string;
  roleOrg: string;
  image: string;
  tag: string;
  socialLinks: {
    mastodon: string;
    twitter: string;
    github: string;
    linkedin: string;
    website: string;
  };
  status: string;
  draft: boolean;
}

const filteredSpeakers = speakersData.speakers.filter(
  (speaker) => speaker.draft !== true && speaker.id !== "tbd")

// Import all images
const images = import.meta.glob<{ default: ImageMetadata }>(
  "images/speakers/*.{jpeg,jpg,png,gif}"
)

interface Props {
  title: string
  ctaButton: {
    text: string
    link: string
  }
}

const { title, ctaButton } = Astro.props

// Function to map tag ID to category name
const getCategoryNameFromTag = (tagId: string): string => {
  const category = speakersData.categories.find((cat) => cat.id === tagId)
  return category ? category.name : tagId
}
---

<section
  class="section section-speakers-featured"
  data-theme-section="light"
  data-bg-section="light"
>
  <div class="container wide">
    <div class="row">
      <div class="col col-title">
        <h2>{title}</h2>
      </div>
    </div>

    <div
      class="flickity-slider-group four-col count-6"
      data-flickity-slider-type="cards"
    >
      <div class="flickity-carousel" style="outline: none;" id="speakers-carousel">
        {
          filteredSpeakers?.map(
            (loop) => (
              <div class="flickity-slide" data-cursor-bubble-text="Drag">
                <a href={`/speakers/${loop.id}/`} class="speaker-card-link">
                  <div class="single-speakers-card">
                    <div class="card-row card-row-image">
                      <div class="card-image">
                        {loop?.image &&
                          images[`/public/images/speakers/${loop.image}`] && (
                            <Picture
                              src={images[
                                `/public/images/speakers/${loop.image}`
                              ]()}
                              formats={["webp", "jpg"]}
                              alt={loop.name}
                              class="overlay"
                              widths={[275, 400, 500, 600, 750, 900]}
                              sizes="(max-width: 700px) 58vw, 450px"
                            />
                          )}
                      </div>

                      <div class="card-tags group-tags">
                        <div class="single-tag">
                          <p>{getCategoryNameFromTag(loop.tag)}</p>
                        </div>
                      </div>
                    </div>
                    <div class="card-row card-row-info">
                      <h3 class="h5">{loop.name}</h3>
                      <p>{loop.roleOrg}</p>
                    </div>
                  </div>
                </a>
              </div>
            )
          )
        }
      </div>
    </div>

    <div class="row">
      <div class="col">
        <Button
          text={ctaButton.text}
          link={ctaButton.link}
          class="btn outline btn-hover xl"
        />
      </div>
    </div>
  </div>
</section>

<style>
  .speaker-card-link {
    text-decoration: none;
    color: inherit;
    display: block;
    transition: transform 0.3s ease;
  }
  
  .speaker-card-link:hover {
    transform: translateY(-5px);
  }
</style>

<script>
  // Function to shuffle array (Fisher-Yates algorithm)
  function shuffleArray<T>(array: T[]): T[] {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  }

  // Wait for the DOM to be fully loaded
  document.addEventListener('DOMContentLoaded', () => {
    const carousel = document.getElementById('speakers-carousel');
    if (!carousel) return;

    // Get all speaker slides
    const slides = Array.from(carousel.children);
    
    // Shuffle the slides
    const shuffledSlides = shuffleArray(slides);
    
    // Clear the carousel
    carousel.innerHTML = '';
    
    // Add only the first 11 shuffled slides back
    shuffledSlides.slice(0, 11).forEach(slide => {
      carousel.appendChild(slide);
    });
  });
</script>
